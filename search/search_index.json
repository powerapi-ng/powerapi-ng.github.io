{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#powerapi","title":"PowerAPI","text":"<p>Measuring power consumption of your applications.</p> <p>Getting started  GitHub </p>"},{"location":"#powermeter-as-a-software","title":"PowerMeter as a Software","text":"<p>You do not need any additional physical power-meter or hardware to estimate power consumption of your applications.  The PowerAPI toolkit allows you to deploy software-defined power-meters to report power consumption at different granularity levels: global, virtual machine, container, application, processus, code.   </p>"},{"location":"#extensible","title":"Extensible","text":"<p>The actor-based architecture of the PowerAPI toolkit enables you to create customized power-meters by adding new plugins for storing metrics and estimations, as well as for computing the latter ones.   </p>"},{"location":"#open-source","title":"Open Source","text":"<p>PowerAPI toolkit is Open Source with a BSD 3-Clause License. Therefore, you can easily contribute to improve the toolkit.   </p>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"#mailing-list","title":"Mailing list","text":"<p>You can follow the latest news and asks questions by subscribing to our mailing list.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>If you would like to contribute code you can do so through our Github repository by forking it and sending a pull request.</p> <p>You should start by reading the contribution guide</p>"},{"location":"credits_licence/","title":"Credits and Licence","text":"<ul> <li> <p>PowerAPI is an open-source project developed by the Spirals research group, University of Lille and Inria</p> <p>This software is licensed under the BSD 3-Clause License, quoted below.</p> <p>BSD 3-Clause License</p> <p>Copyright (c) 2023, INRIA87801. *1/ Copyright (c) 2023, University of Lille All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> </li> <li> <p>Icons source: Flat Icon and Noun Project</p> </li> </ul>"},{"location":"getting_started/","title":"Getting started","text":"<p>If you want to monitor the energy consumption of your process we have some ready-to-use tools</p> Source and Destination <p>In order to use any Formula, you need to run a Source and a Destination. The former is used by a Sensor to store metrics. The later allows the Formula to make available the estimations. For starting, you can use MongoDB as Source and InfluxDB:2.X as Destination by installing them as Docker containers. For more details about Sources and Destinations please check this section.</p>"},{"location":"getting_started/#smartwatts-formula","title":"SmartWatts Formula","text":"<p>for monitoring the power consumption of your process</p> <p>Smartwatts is made for tracking the power consumption of processes on a machine. To install Smartwatts on a baremetal server or a PC run the following script in a Terminal. Please notice that you will need pip or docker in order to use the Formula.</p> <p>The script explains what it will do and then pauses before it does it.</p> <p>Please notice that you need a Linux distribution in order to use the HWPC Sensor installed by the script as well as a comptible Intel (Sandy Bridge and newer) or AMD Processor (Zen). You also need docker.  Power/ARM/RISCV are not supported architectures. HWPC Sensor will not work on a Virtual Machine. However, you can install the Formula by hand in a Virtual Machine if need it.</p>"},{"location":"getting_started/#cgroups","title":"CGroups","text":"<p>If you need to monitor a process or a group of process via SmartWatts by using HWPC Sensor version 1.2 or older, you can follow this tutorial. Please notice that cgroup V1 is required only for HWPC Sensor version 1.2 or older. If you need to enable this <code>cgroup</code> version please follow this tutorial.    </p>"},{"location":"publications/","title":"Publications","text":"<ul> <li>PowerAPI: A Python framework for building software-defined power meters: G. Fieni, D. Romero Acero, P. Rust, R. Rouvoy. Journal of Open Source Software. 9(98):6670, June 2024.</li> <li>Evaluating the Impact of Java Virtual Machines on Energy Consumption: Z. Ournani, MC. Belgaid, R. Rouvoy, P. Rust, J. Penhoat. 15th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). October 2021, Bari, Italy.</li> <li>SelfWatts: On-the-fly Selection of Performance Events to Optimize Software-defined Power Meters: G. Fieni, R. Rouvoy, L. Seiturier. 20th IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing (CCGRID 2021). May 2021, Melbourne, Australia.</li> <li>SmartWatts: Self-Calibrating Software-Defined Power Meter for Containers: G. Fieni, R. Rouvoy, L. Seiturier. 20th IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing (CCGRID 2020). May 2020, Melbourne, Australia.</li> <li>Taming Energy Consumption Variations in Systems Benchmarking: Z. Ournani, MC. Belgaid, R. Rouvoy, P. Rust, J. Penhoat, L. Seinturier. 11th ACM/SPEC International Conference on Performance Engineering (ICPE'2020). April 2020, Edmonton, Canada.</li> <li>The Next 700 CPU Power Models: M. Colmant, R. Rouvoy, M. Kurpicz, A. Sobe, P. Felber, L. Seinturier. Elsevier Journal of Systems and Software (JSS). 144(10):382-396, Elsevier.</li> <li>WattsKit: Software-Defined Power Monitoring of Distributed Systems: M. Colmant, P. Felber, R. Rouvoy, L. Seinturier. IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGrid). April 2017, Spain, France. pp.1-14.</li> <li>Process-level Power Estimation in VM-based Systems: M. Colmant, M. Kurpicz, L. Huertas, R. Rouvoy, P. Felber, A. Sobe. European Conference on Computer Systems (EuroSys). April 2015, Bordeaux, France. pp.1-14.</li> <li>Monitoring Energy Hotspots in Software: A. Noureddine, R. Rouvoy, L. Seinturier. Journal of Automated Software Engineering, Springer, 2015, pp.1-42.</li> <li>Unit Testing of Energy Consumption of Software Libraries: A. Noureddine, R. Rouvoy, L. Seinturier. International Symposium On Applied Computing (SAC), March 2014, Gyeongju, South Korea. pp.1200-1205.</li> <li>Informatique : Des logiciels mis au vert: L. Seinturier, R. Rouvoy. J'innove en Nord Pas de Calais, NFID, 2013.</li> <li>PowerAPI: A Software Library to Monitor the Energy Consumed at the Process-Level: A. Bourdon, A. Noureddine, R. Rouvoy, L. Seinturier. ERCIM News, Special Theme: Smart Energy Systems, 92, pp.43-44. ERCIM, 2013.</li> <li>Mesurer la consommation en \u00e9nergie des logiciels avec pr\u00e9cision: A. Bourdon, R. Rouvoy, L. Seinturier. 01 Business &amp; Technologies, 2013.</li> <li>A review of energy measurement approaches: A. Noureddine, R. Rouvoy, L. Seinturier. ACM SIGOPS Operating Systems Review, ACM, 2013, 47 (3), pp.42-49.</li> <li>Runtime Monitoring of Software Energy Hotspots: A. Noureddine, A. Bourdon, R. Rouvoy, L. Seinturier. International Conference on Automated Software Engineering (ASE), September 2012, Essen, Germany. pp.160-169.</li> <li>A Preliminary Study of the Impact of Software Engineering on GreenIT: A. Noureddine, A. Bourdon, R. Rouvoy, L. Seinturier. International Workshop on Green and Sustainable Software (GREENS), June 2012, Zurich, Switzerland. pp.21-27.</li> </ul>"},{"location":"reference/overview/","title":"PowerAPI Overview","text":"<p>The goal of this project is to provide a set of tools to go forward a greener computing. The idea is to provide software-defined PowerMeters to mesure the power consumption of programs. The core of this project is the PowerAPI toolkit for building such PowerMeters.</p>"},{"location":"reference/overview/#software-powermeters","title":"Software PowerMeters","text":"<p>A software PowerMeter is an application built with the PowerAPI components that can measure the power consumption of software running on a single machine or on a cluster of machine.</p> <p>The Figure below depicts the global architecture of a software PowerMeter in PowerAPI.</p> <p></p> <p>A PowerMeter has two components, a Sensor and a Formula, used to produce an estimation of the power consumption of a monitored software.</p>"},{"location":"reference/overview/#sensor","title":"Sensor","text":"<p>The Sensor is an independent software that collects raw data (metrics) correlated with the power consumption of the monitored software.</p> <p>Data are collected by querying the hardware\u2019s machine that hosts the monitored software. The sensor must be executed on the same machine as the monitored software. The data are collected throughout the duration of the software. For this reason, the sensor must operate in parallel.</p> <p>Collected raw data are stored in an external Source to make the data available to the Formula. This Source may be hosted on an other machine.</p>"},{"location":"reference/overview/#usage","title":"Usage","text":"<p>Currently, PowerAPI proposes one Sensor: HWPC. Refer to the Sensor documentation to know how to use it.</p>"},{"location":"reference/overview/#formula","title":"Formula","text":"<p>A Formula is a computational module that computes an estimation of the power consumption of monitored software from the data collected by the sensor.</p> <p>A Formula has two working modes:</p> <ul> <li> <p><code>stream</code> mode where the Formula read the data from the Sensor as they are   produced (in realtime).</p> </li> <li> <p><code>post-mortem</code> mode where the Formula analyses the data already collected by the Sensor in a past monitoring phase.</p> </li> </ul>"},{"location":"reference/overview/#usage_1","title":"Usage","text":"<p>Currently, there is one Formula: SmartWatts. Refer to the Formula documentation to know how to use it.</p>"},{"location":"reference/cgroup/cgroup/","title":"How to create a cgroup","text":"<p>If you want to monitor a specific process (or group of process) with <code>cgroup</code> V1, you have to create a cgroup with <code>perf_event</code> controller and add the process you want to monitor to this cgroup.</p> <p>You can easly do this with the following command :</p> <ul> <li>To create the cgroup:</li> </ul> <pre><code>cgcreate -g perf_event:new_cgroup_name\n</code></pre> <p>with <code>new_cgroup_name</code> the name of the cgroup you want to create (this will be the name wich will identify power consumption of you process).</p> <ul> <li>To add your process to the newly created cgroup:</li> </ul> <pre><code>cgclassify -g perf_event:new_cgroup_name PID\n</code></pre> <p>with <code>PID</code>, the pid of the process you want to monitor. If you want to monitor a program composed of many process, replace PID with <code>$(pidof program_name)</code>.</p>"},{"location":"reference/cgroup/cgroup_v1_activation/","title":"How to active cgroups V1","text":"<p>You can enable cgroups V1 by adding <code>systemd.unified_cgroup_hierarchy=false</code> and <code>systemd.legacy_systemd_cgroup_controller=false</code> as permanent parameters of the kernel. In order to that follow these instructions:</p> <ul> <li> <p>Open the GRUB file: <pre><code>sudo nano /etc/default/grub\n</code></pre></p> </li> <li> <p>Add to <code>GRUB_CMDLINE_LINUX_DEFAULT</code> the two parameters:</p> </li> </ul> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false\"\n</code></pre> <ul> <li>Update grub: <pre><code>sudo update-grub\n</code></pre></li> </ul>"},{"location":"reference/database/sources_destinations/","title":"Sources and Destinations","text":"<p>A PowerAPI Formula uses Sources and Destinations in order to retrieve metrics and store estimations.</p> <p>For each Source/Destination the parameters to specify are different. For each one of them, its parameters are specified in following sections.</p>"},{"location":"reference/database/sources_destinations/#summary","title":"Summary","text":"Name Source Destination CLI <code>input</code>/<code>ouput</code> parameter value JSON <code>type</code> tag parameter value MongoDB Yes Yes mongodb mongodb InfluxDB2 No Yes influxdb2 influxdb2 CSV Yes Yes csv csv Socket Yes No socket socket File Database Yes Yes filedb filedb Prometheus No Yes prometheus prometheus"},{"location":"reference/database/sources_destinations/#mongodb","title":"MongoDB","text":"<p>If you want to use a Mongo Database in your Formula, you have to specify <code>mongodb</code> as the <code>type</code> of a puller (Source) or a pusher (Destination).</p>"},{"location":"reference/database/sources_destinations/#parameters","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>uri</code> string <code>u</code> (<code>U</code> for <code>HWPCSensor</code>) N/A Yes The IP address of your MongoDB instance <code>db</code> (<code>database</code> for <code>HWPCSensor</code>) string <code>d</code> (<code>D</code> for <code>HWPCSensor</code>) N/A Yes The name of your database <code>collection</code> string <code>c</code> (<code>C</code> for <code>HWPCSensor</code>) N/A Yes The name of the collection inside <code>db</code> <code>name</code> string <code>n</code> <code>\"puller_mongodb\"</code> (Source), <code>pusher_mongodb</code> (Destination) No The related puller/pusher name. This parameter is not used by <code>HWPCSensor</code> <code>model</code> string <code>m</code> <code>\"HWPCReport\"</code> (Source), <code>PowerReport</code> (Destination) No The Report type stored by the database"},{"location":"reference/database/sources_destinations/#json-file-excerpt","title":"JSON File Excerpt","text":"<p>Below you find a configuration excerpt for this kind of Source/Destination.</p> <pre><code>{\n  \"type\": \"mongodb\",\n  \"uri\": \"mongodb://127.0.0.1\",\n  \"db\": \"test\",\n  \"collection\": \"prep\"\n}\n</code></pre> <p>The default port for MongoDB is 27017</p>"},{"location":"reference/database/sources_destinations/#influx-db-2","title":"Influx DB 2","text":"<p>If you want to use InfluxDB 2 in your Formula as Destination, you have to specify <code>influxedb2</code> as the <code>type</code> of a pusher.</p>"},{"location":"reference/database/sources_destinations/#parameters_1","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>uri</code> string <code>u</code> N/A Yes The IP address of your Influxdb instance. It can contain the port number <code>db</code> string <code>d</code> N/A Yes The name of your bucket (database) <code>port</code> int <code>p</code> None N/A The port of communication. It is not mandatory if it is indicated in the <code>uri</code> <code>token</code> string <code>k</code> N/A Yes The token for accessing the database. The token owner must have write/read permissions on the bucket <code>org</code> string <code>g</code> N/A Yes The name of the organization associated to the bucket <code>tags</code> string <code>t</code> N/A No List of metadata keys of the report separated by <code>,</code> that will be kept. <code>sensor</code> and <code>target</code> are always kept as report metadata <code>name</code> string <code>n</code> <code>\"pusher_influxdb2\"</code> No The related pusher name <code>model</code> string <code>m</code> <code>\"PowerReport\"</code> No The Report type stored by the database <p>InfluxDB2 can only be used as a Destination.</p>"},{"location":"reference/database/sources_destinations/#json-file-excerpt_1","title":"JSON File Excerpt","text":"<p>Below you find an example of configuration excerpt for this kind of Destination.</p> <pre><code>{\n  \"model\": \"PowerReport\",\n  \"type\": \"influxdb2\",\n  \"uri\": \"http://127.0.0.1\",\n  \"port\": 8086,\n  \"db\": \"influxdb2\",\n  \"org\": \"org_test\",\n  \"token\": \"mytoken\"\n}\n</code></pre>"},{"location":"reference/database/sources_destinations/#csv","title":"CSV","text":"<p>If you want to use a CSV file in your Formula as Source or Destination, you have to specify <code>csv</code> as the <code>type</code> of a puller or a pusher.</p>"},{"location":"reference/database/sources_destinations/#parameters_2","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>files</code>(Source) string <code>f</code> Empty list No The list of input CSV files with the format file1,file2,file3... <code>directory</code> (Destination and <code>HWPCSensor</code>) string <code>d</code> (<code>U</code> for <code>HWPCSensor</code>) Current directory No The directory where output CSV files will be written <code>name</code> string <code>n</code> <code>\"puller_csv\"</code> (Source), <code>\"pusher_csv\"</code> (Destination) No The related puller/pusher name. This parameter is not used by <code>HWPCSensor</code> <code>model</code> string <code>m</code> <code>\"HWPCReport\"</code> (Source), <code>\"PowerReport\"</code> (Destination) No The Report type stored in CSV files. This parameter is not used by <code>HWPCSensor</code>"},{"location":"reference/database/sources_destinations/#json-file-excerpt_2","title":"JSON File Excerpt","text":"<p>Below you find an example of configuration excerpt for this kind of Source/Destination.</p> <pre><code>{\n  \"type\": \"csv\",\n  \"directory\": \"/tmp/sensor_output/\"\n}\n</code></pre>"},{"location":"reference/database/sources_destinations/#socket","title":"Socket","text":"<p>If you want to use a TCP socket in your Formula as Source, you have to specify <code>socket</code> as the <code>type</code> of a puller. This Source is made for <code>stream</code> mode active only.</p>"},{"location":"reference/database/sources_destinations/#parameters_3","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>port</code> int <code>P</code> N/A Yes The port of communication <code>uri</code>/ <code>host</code> int <code>U</code> N/A Yes The IP address of the machine running the socket <code>name</code> string <code>n</code> <code>\"puller_socket\"</code> No The related puller name <code>model</code> string <code>m</code> <code>\"HWPCReport\"</code> No The Report type managed by the socket"},{"location":"reference/database/sources_destinations/#json-file-excerpt_3","title":"JSON File Excerpt","text":"<p>Below you find an example of configuration excerpt for this kind of Source.</p> <pre><code>{\n  \"type\": \"socket\",\n  \"port\": 8080,\n  \"host\": \"127.0.0.1\"\n}\n</code></pre>"},{"location":"reference/database/sources_destinations/#file-database","title":"File Database","text":"<p>If you want to use a File Database as Source/Destination in your Formula your have to specify <code>filedb</code> as the <code>type</code> of a puller or a pusher. The File Database is made for stream mode only. It should contain only the last report when used as a Destination.</p>"},{"location":"reference/database/sources_destinations/#parameters_4","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>filename</code> int <code>f</code> N/A Yes The name of the file <code>name</code> string <code>n</code> <code>\"pusher_filedb\"</code> No The related pusher name <code>model</code> string <code>m</code> <code>\"HWPCReport\"</code> (Source) <code>\"PowerReport\"</code> (Destination) No The Report type stored in the file"},{"location":"reference/database/sources_destinations/#json-file-excerpt_4","title":"JSON File Excerpt","text":"<p>Below you find an example of configuration excerpt for this kind of Source/Destination.</p> <pre><code>{\n  \"type\": \"filedb\",\n  \"filename\": /tmp/database/input_file.json\n}\n</code></pre>"},{"location":"reference/database/sources_destinations/#prometheus","title":"Prometheus","text":"<p>If you want to use a Prometheus instance to expose reports to be scraped, you have to specify <code>prometheus</code> as the <code>type</code> of a pusher in your formula configuration file.</p>"},{"location":"reference/database/sources_destinations/#parameters_5","title":"Parameters","text":"<p>The list of accepted parameters are:</p> Parameter Type CLI shortcut Default Value Mandatory Description <code>uri</code> string <code>u</code> <code>127.0.0.1</code> No The IP address of your Prometheus instance <code>port</code> int <code>p</code> N/A Yes The port of communication <code>tags</code> string <code>t</code> N/A No List of metadata keys of the report separated by <code>,</code> that will be kept. <code>sensor</code> and <code>target</code> are always kept as report metadata <code>metric-name</code> string <code>M</code> N/A Yes The exposed metric name <code>metric-description</code> string <code>d</code> <code>\"energy consumption\"</code> No The exposed metric description <code>name</code> string <code>n</code> <code>\"pusher_prom\"</code> No The related pusher name <code>model</code> string <code>m</code> <code>\"PowerReport\"</code> No The Report type exposed by Prometheus <p>Prometheus can only be used as a Destination that monitors reports but they will be not stored by this service. The tags names are metadata keys of reports to be used as labels. If a report doesn't have a provide tag, it will be ignored by the Destination.    </p>"},{"location":"reference/database/sources_destinations/#json-file-excerpt_5","title":"JSON File Excerpt","text":"<p>Below you find an example of configuration excerpt for this kind of Destination.</p> <pre><code>{\n  \"type\": \"prometheus\",\n  \"uri\": \"127.0.0.1\",\n  \"port\": 8080,\n  \"metric-name\": \"test\"\n}\n</code></pre>"},{"location":"reference/formulas/configuration_files/","title":"Formula Configuration","text":"<p>PowerAPI can read configurations through the CLI or through configuration files.</p>"},{"location":"reference/formulas/configuration_files/#cli-parameters","title":"CLI Parameters","text":"<p>The table below shows basic parameters.</p> Parameter Type CLI shortcut Default Value Description <code>verbose</code> <code>bool</code> (flag) <code>v</code> <code>NOTSET</code> Verbose or quiet mode <code>stream</code> <code>bool</code> (flag) <code>s</code> <code>False</code> Real time or post-mortem mode <code>sensor-report-sampling-interval</code> <code>int</code> N/A <code>1000</code> The time in milliseconds between two reports (<code>stream</code> = <code>True</code>) <code>input</code> <code>string</code> (Source) N/A N/A Source used as input. More information about Sources and their related parameters can be found here <code>output</code> <code>string</code> (Destination) N/A N/A Destination used as output. More information about Destinations and their related parameters can be found here <code>pre-processor</code> <code>string</code> N/A N/A Pre-Processor to modify reports generated by a sensor. More information about Processors and their related parameters can be found here <code>post-processor</code> <code>string</code> N/A N/A Post-Processor to modify reports generated by a formula. More information about Processors and their related parameters can be found here Sources and Destinations' values <ul> <li>Sources: <code>mongodb</code>, <code>csv</code>, <code>socket</code>, <code>filedb</code></li> <li>Destinations: <code>mongodb</code>, <code>influxedb</code>, <code>influxedb2</code>, <code>csv</code>, <code>socket</code>, <code>filedb</code>, <code>prom</code></li> </ul> Processors' values <ul> <li>Pre-Processors: <code>k8s</code>, <code>libvirt</code></li> </ul>"},{"location":"reference/formulas/configuration_files/#configuration-file","title":"Configuration File","text":"<p>PowerAPI Formulas use <code>json</code> files. These files follow the next template:</p> <pre><code>{\n  \"verbose\": $bool,\n  \"stream\": $bool ,\n  \"sensor-report-sampling-interval\" : $int,\n  \"input\": {\n    $puller_name: {\n      \"model\": $type_of_report,\n      \"type\": $type_of_database,\n      $database_parameters\n    }\n    ... #(Multiple pullers can be used)\n  },\n  \"output\": {\n    $pusher_name: {\n      \"type\": $type_of_database\n      $database_parameters\n    }\n    ... #(Multiple pushers can be used)\n\n  },\n  $processors_if_required\n  $formula_parameters\n}\n</code></pre> Sources and Destinations' <code>json</code> tags <p>More information related to <code>json</code> tags for each Source/Destination can be found here</p>"},{"location":"reference/formulas/formula_creation/","title":"Formula creation","text":"<p>PowerAPI is a middleware toolkit for building software-defined power meters. Software-defined power meters are configurable software libraries that can estimate the power consumption of software in real-time. As a middleware toolkit, PowerAPI offers the capability of assembling power meters \u00ab\u00e0 la carte\u00bb to accommodate user requirements. If you want to build your own power meter using PowerAPI, we provide a step by step guide.</p>"},{"location":"reference/formulas/formula_creation/#creating-your-own-formula","title":"Creating your own formula","text":"<p>To develop a formula you have to consider the following parts :</p> <ul> <li>The configuration parameters needed by the actor</li> <li>The dispatching rule of the reports to the different formula actors</li> <li>The behavior of the formula actor</li> </ul> <p>We provide a dummy formula that contain the template to develop your own formula. Next we provide a guide on developing your own formula using that template.</p>"},{"location":"reference/formulas/formula_creation/#starting","title":"Starting","text":"<p>To develop a formula there is two major tasks. How to handle the formula actor, and the behavior of the formula actor.</p> <p>The first thing you need to decide is what will your formula receive as inputs, how it will treat it and what will it return. Once you've decide this part you need to extract the parameters needed by the formula actor. In the next of this guide we will treat the handling of the formula actor then we will provide some advices on how to develop your formula actor.</p>"},{"location":"reference/formulas/formula_creation/#handling-the-actor","title":"Handling the actor","text":"<p>Once you've decided the parameters the formula actor will need, we need to build the chain to pass them from the configuration file to the actor.</p> <p>First we need to build the parser that will extract the parameters from the configuration file. For that part we are working on <code>generate_dummy_parser</code> in <code>__main__.py</code>. For each parameters <code>arg</code> you should add the following lines :</p> <pre><code>    parser.add_argument(\n        \"arg\",  # name of the arg\n        help=\"help on arg\",  # help to display when --help is used\n        type=None,  # type expected\n        default=None,  # Default value if not specified\n    )\n</code></pre> <p>Once the configuration is retrieved from the configuration file it is necessary to check it. For that we use a <code>DummyConfigValidator</code> that will check that each mandatory arguments are present and that each arguments have the correct type.</p> <p>At this moment the configuration is a Dictionary, it will be transformed to a <code>DummyFormulaConfig</code> (in <code>context.py</code>) to be passed to the actor. You should put each parameters needed in the formula actor as attribute of that class.</p> <p>In addition of the configuration you need to specify the dispatch rule of <code>route_table</code>. This rule decide which report is send to which formula actor. If you choose SENSOR, reports with the same sensor field will be send to the same actor. If you choose SOCKET the sort will be made on the <code>sensor</code> field.</p>"},{"location":"reference/formulas/formula_creation/#your-formula","title":"Your formula","text":"<p>Now that you actor will receive its parameters, you need to build it. Your actor will be initialized two times, one as an object and one as an actor. You first need to define all the attributes as <code>None</code> is the <code>__init__</code>. The supervisor will then call <code>_initialization</code> with a <code>StartMessage</code> containing the configuration.</p> <p>The <code>receiveMsg_Report(self,message)</code> method will be used each time a report is send to the formula actor. Once you have treated your reports and produced the output reports, send them to the pushers using the following commands :</p> <pre><code>for name, pusher in self.pushers.items():\n    self.log_debug('send ' + str(report) + ' to ' + name)\n    self.send(pusher, report)\n</code></pre>"},{"location":"reference/formulas/rapl/","title":"RAPL Formula","text":"<p>RAPL stands for Running Average Power Limit. It is a feature of recent Intel processors that provide the energy consumption of the processor.</p> <p>The RAPL Formula is designed to mesure power consumption of domains (CPU or RAM) in real time.</p> <p>The RAPL Formula takes HWPC Report with RAPL event for each domains. It then returns the mesured power in a PowerReport for each domain. This Formula does not perform any other computation as its goal is only to track global power consumption in a more readable way than raw RAPL.</p>"},{"location":"reference/formulas/rapl/#installation","title":"Installation","text":"<p>You can use the following script to install RAPL Formula and HWPC Sensor.</p> DockerPypi <pre><code>docker pull powerapi/powerapi\n</code></pre> <pre><code>pip install powerapi\n</code></pre>"},{"location":"reference/formulas/rapl/#usage","title":"Usage","text":"<p>For running the RAPL Formula you need: a Source and a Destination, a Sensor that provides <code>HWPCReports</code> and a configuration.</p>"},{"location":"reference/formulas/rapl/#source-and-destination","title":"Source and Destination","text":"<p>For running RAPL we are using MongoDB as Source and Destination as a docker container.</p> <p>To start a MongoDB instance via the command line</p> <pre><code>docker run -d --name mongo_source_destination -p 27017:27017 mongo\n</code></pre>"},{"location":"reference/formulas/rapl/#sensor","title":"Sensor","text":"<p>HWPC Sensor is used in order to get <code>HWPCReports</code>. Start by installing the HWPC Sensor (see here) and start it (see here).</p>"},{"location":"reference/formulas/rapl/#parameters","title":"Parameters","text":"<p>Besides the basic parameters, the following ones are specific to RAPL:</p> Parameter Type CLI shortcut Default Value Description <code>disable-cpu-formula</code> <code>bool</code> (flag) - <code>true</code> Disable CPU formula <code>disable-dram-formula</code> <code>bool</code> (flag) - <code>true</code> Disable DRAM formula <code>cpu-rapl-ref-event</code> <code>string</code> - <code>RAPL_ENERGY_PKG</code> RAPL event used as reference for the CPU power models <code>dram-rapl-ref-event</code> <code>string</code> - <code>RAPL_ENERGY_DRAM</code> RAPL event used as reference for the DRAM power models <code>sensor-report-sampling-interval</code> <code>int</code> - <code>1000</code> The frequency with which measurements are made (in milliseconds)"},{"location":"reference/formulas/rapl/#running-the-formula-with-a-configuration-file","title":"Running the Formula with a Configuration File","text":"<p>Below an example is provided by using MongoDB as Source and Destination.</p> <pre><code>{\n  \"verbose\": true,\n  \"stream\": true,\n  \"input\": {\n    \"puller\": {\n      \"model\": \"HWPCReport\",\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test\",\n      \"collection\": \"prep\"\n    }\n  },\n  \"output\": {\n    \"pusher_power\": {\n      \"type\": \"mongodb\",\n      \"model\": \"PowerReport\",\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test\",\n      \"collection\": \"results\"\n    }\n  },\n  \"disable-dram-formula\": true,\n  \"sensor-report-sampling-interval\": 500\n}\n</code></pre> Alternative Source or Destination <p>If you want to use another Source or Destination, please check the documentation here and modify the configuration file according to the Source and/or Destination that you want to use.</p> <p>Once you have your configuration file, run RAPL using one of the following command lines, depending on the installation you use:</p> DockerPip <pre><code>docker run -t \\\n--net=host \\\n-v $(pwd)/config_file.json:/config_file.json \\\npowerapi/powerapi --config-file /config_file.json \\\n</code></pre> <pre><code>python -m powerapi --config-file config_file.json\n</code></pre>"},{"location":"reference/formulas/rapl/#running-the-formula-via-cli-parameters","title":"Running the Formula via CLI parameters","text":"<p>In order to run the Formula without a configuration file, run RAPL using one of the following command lines, depending on the installation you use:</p> DockerPip <pre><code>docker run -t \\\n--net=host \\\npowerapi/powerapi --verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output mongodb --model PowerReport --uri mongodb://127.0.0.1 --db test --collection results \\\n--disable-dram-formula \\\n--sensor-report-sampling-interval 500\n</code></pre> <pre><code>python -m powerapi --verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output mongodb --model PowerReport --uri mongodb://127.0.0.1 --db test --collection results \\\n--disable-dram-formula \\\n--sensor-report-sampling-interval 500\n</code></pre> Estimations' Storage <p>Your <code>PowerReports</code> will be stored on MongoDB.</p> Using shortcuts for parameters' names <p>You use <code>-</code> instead of <code>--</code>.</p>"},{"location":"reference/formulas/smartwatts/","title":"SmartWatts Formula","text":"<p>SmartWatts is a software-defined power meter based on the PowerAPI toolkit. SmartWatts is a configurable software that can estimate the power consumption of software in real-time. SmartWatts needs to receive several metrics provided by HWPC Sensor :</p> <ul> <li>The Running Average Power Limit (<code>RAPL</code>)</li> <li><code>msr</code> events (<code>TSC</code>, <code>APERF</code>, <code>MPERF</code>)</li> <li><code>core</code> events which depend on the Processor Architucture</li> </ul> <p>These metrics are then used as inputs for a power model that estimates the power consumption of each software. The model is calibrated each time a <code>cpu-error-threshold</code> is reached by learning a new power model with previous reports.</p> <p>The choice of those specific metrics is motivated in SmartWatts: Self-Calibrating Software-Defined Power Meter for Containers</p>"},{"location":"reference/formulas/smartwatts/#installation","title":"Installation","text":"<p>You can use the following command to install SmartWatts:</p> DockerPypi <pre><code>docker pull ghcr.io/powerapi-ng/smartwatts-formula\n</code></pre> <pre><code>pip install smartwatts\n</code></pre>"},{"location":"reference/formulas/smartwatts/#usage","title":"Usage","text":"<p>For running the SmartWatts Formula you need: a Source and a Destination, a Sensor that provides <code>HWPCReports</code> and a configuration.</p>"},{"location":"reference/formulas/smartwatts/#source-and-destination","title":"Source and Destination","text":"<p>For running SmartWatts we are using MongoDB as Source and InfluxDB 2.X as Destination as dockers containers.</p> <p>To start a MongoDB instance via the command line</p> <p><pre><code>docker run -d --name mongo_source -p 27017:27017 mongo\n</code></pre> And a InfluxDB 2.X instance</p> <pre><code>docker run -p 8086:8086 -v \"/tmp/powerapi-influx/data:/var/lib/influxdb2\" -v \"/tmp/powerapi-influx/config:/etc/influxdb2\" influxdb:2\n</code></pre> Set up influxdb 2.X for the first time <p>If it is the first time that you are using <code>influxdb 2.X</code>, there are several methods (UI, CLI, API) to make a set up. Please check here for more information.  </p>"},{"location":"reference/formulas/smartwatts/#sensor","title":"Sensor","text":"<p>HWPC Sensor is used in order to get <code>HWPCReports</code>. Start by installing the HWPC Sensor (see here) and start it (see here).</p>"},{"location":"reference/formulas/smartwatts/#parameters","title":"Parameters","text":"<p>Besides the basic parameters, the following ones are specific to SmartWatts:</p> Parameter Type CLI shortcut Default Value Description <code>disable-cpu-formula</code> <code>bool</code> (flag) - <code>false</code> Disable CPU Formula <code>disable-dram-formula</code> <code>bool</code> (flag) - <code>false</code> Disable RAM Formula <code>cpu-rapl-ref-event</code> <code>string</code> - <code>\"RAPL_ENERGY_PKG\"</code> RAPL event used as reference for the CPU power models <code>dram-rapl-ref-event</code> <code>string</code> - <code>\"RAPL_ENERGY_DRAM\"</code> RAPL event used as reference for the DRAM power models <code>cpu-tdp</code> <code>int</code> - <code>125</code> CPU TDP (in Watt) <code>cpu-base-clock</code> <code>int</code> - <code>100</code> CPU base clock (in MHz) <code>cpu-base-freq</code> <code>int</code> - <code>2100</code> CPU base frequency (in MHz) <code>cpu-error-threshold</code> <code>float</code> - <code>2.0</code> Error threshold for the CPU power models (in Watts) <code>dram-error-threshold</code> <code>float</code> - <code>2.0</code> Error threshold for the DRAM power models (in Watts) <code>learn-min-samples-required</code> <code>int</code> - <code>10</code> Minimum amount of samples required before trying to learn a power model <code>learn-history-window-size</code> <code>int</code> - <code>60</code> Size of the history window used to keep samples to learn from <code>sensor-reports-frequency</code> <code>int</code> - <code>1000</code> The frequency with which measurements are made (in milliseconds)"},{"location":"reference/formulas/smartwatts/#running-the-formula-via-cli-parameters","title":"Running the Formula via CLI parameters","text":"<p>In order to run the Formula, you can execute one of the following command lines, depending on the installation you use:</p> DockerPip <pre><code>docker run -t \\\n--net=host \\\npowerapi/smartwatts-formula --verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output influxdb2 --model PowerReport --uri 127.0.0.1 --port 8086 --db power_consumption --org org_test --token mytoken \\\n--cpu-base-freq 1900 \\\n--cpu-error-threshold 2.0 \\\n--disable-dram-formula \\\n--sensor-reports-frequency 1000\n</code></pre> <pre><code>python -m smartwatts \\\n--verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output influxdb2 --model PowerReport --uri 127.0.0.1 --port 8086 --db power_consumption --org org_test --token mytoken\\\n--cpu-base-freq 1900 \\\n--cpu-error-threshold 2.0 \\\n--disable-dram-formula \\\n--sensor-reports-frequency 1000\n</code></pre> <p>In this configuration we are using MongoDB as source and InfluxDB 2.X as Destination. Some parameters values depend of your hardware. In particular, <code>cpu-base-freq</code>. You can obtain this value from <code>CPU MHz</code> field by using <code>lscpu</code> command.</p> Estimations' Storage <p>Your <code>PowerReports</code> will be stored on InfluxDB2. You can watch them in a grafana by using the following tutorial.</p> Using shortcuts for parameters' names <p>You use <code>-</code> instead of <code>--</code>.</p>"},{"location":"reference/formulas/smartwatts/#running-the-formula-with-environment-variables","title":"Running the Formula with Environment Variables","text":"<p>Parameters are defined by using the prefixes <code>POWERAPI_</code>, <code>POWERAPI_INPUT_</code> and <code>POWERAPI_OUTPUT_</code> in the names of Environment Variables. The following conventions are used:</p> <ul> <li><code>POWERAPI_&lt;PARAMETER_NAME&gt;</code></li> <li><code>POWERAPI_INPUT_&lt;COMPONENT_NAME&gt;_&lt;PARAMETER_NAME&gt;</code></li> <li><code>POWERAPI_OUTPUT_&lt;COMPONENT_NAME&gt;_&lt;PARAMETER_NAME&gt;</code></li> </ul> <p>where <code>PARAMETER_NAME</code> refers to names of parameters in upper case (e.g., <code>VERBOSE</code>, <code>CPU_BASE_FREQ</code>, <code>COLLECTION</code>) and <code>COMPONENT_NAME</code> to the name given to the different Sources and Destinations in upper case (e.g., <code>PULLER</code> and <code>PUSHER_POWER</code>).</p> <p>Below you find an example for running the Formula with Docker and Pip:</p> DockerPip <pre><code>docker run -t \\\n--net=host \\\n-e POWERAPI_VERBOSE=true \\\n-e POWERAPI_STREAM=true \\\n-e POWERAPI_CPU_BASE_FREQ=1900 \\\n-e POWERAPI_CPU_ERROR_THRESHOLD=2.0 \\\n-e POWERAPI_DISABLE_DRAM_FORMULA=true \\\n-e POWERAPI_SENSOR_REPORTS_FREQUENCY=1000 \\\n-e POWERAPI_INPUT_PULLER_MODEL=HWPCReport \\\n-e POWERAPI_INPUT_PULLER_TYPE=mongodb \\\n-e POWERAPI_INPUT_PULLER_URI=mongodb://127.0.0.1 \\\n-e POWERAPI_INPUT_PULLER_DB=test \\\n-e POWERAPI_INPUT_PULLER_COLLECTION=prep \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_MODEL=PowerReport \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_TYPE=influxdb2 \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_URI=127.0.0.1 \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_PORT=8086 \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_DB=power_consumption \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_ORG=org_test \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_TOKEN=mytoken \\\npowerapi/smartwatts-formula\n</code></pre> <pre><code>export POWERAPI_VERBOSE=true\nexport POWERAPI_STREAM=false\nexport POWERAPI_CPU_BASE_FREQ=1900\nexport POWERAPI_CPU_ERROR_THRESHOLD=2.0\nexport POWERAPI_DISABLE_DRAM_FORMULA=true\nexport POWERAPI_SENSOR_REPORTS_FREQUENCY=1000\nexport POWERAPI_INPUT_PULLER_MODEL=HWPCReport\nexport POWERAPI_INPUT_PULLER_TYPE=mongodb\nexport POWERAPI_INPUT_PULLER_URI=mongodb://127.0.0.1\nexport POWERAPI_INPUT_PULLER_DB=test\nexport POWERAPI_INPUT_PULLER_COLLECTION=prep\nexport POWERAPI_OUTPUT_PUSHER_POWER_MODEL=PowerReport\nexport POWERAPI_OUTPUT_PUSHER_POWER_TYPE=influxdb2\nexport POWERAPI_OUTPUT_PUSHER_POWER_URI=127.0.0.1\nexport POWERAPI_OUTPUT_PUSHER_POWER_PORT=8086\nexport POWERAPI_OUTPUT_PUSHER_POWER_DB=power_consumption\nexport POWERAPI_OUTPUT_PUSHER_POWER_ORG=org_test\nexport POWERAPI_OUTPUT_PUSHER_POWER_TOKEN=mytoken\npython -m smartwatts\n</code></pre>"},{"location":"reference/formulas/smartwatts/#running-the-formula-with-a-configuration-file","title":"Running the Formula with a Configuration File","text":"<p>Below an example is provided by using MongoDB as Source and InfluxDB as Destination.</p> <pre><code>{\n  \"verbose\": true,\n  \"stream\": true,\n  \"input\": {\n    \"puller\": {\n      \"model\": \"HWPCReport\",\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test\",\n      \"collection\": \"prep\"\n    }\n  },\n  \"output\": {\n    \"pusher_power\": {\n      \"type\": \"influxdb2\",\n      \"uri\": \"127.0.0.1\",\n      \"port\": 8086,\n      \"db\": \"power_consumption\",\n      \"org\": \"org_test\",\n      \"token\": \"mytoken\"\n    }\n  },\n  \"cpu-base-freq\": 1900,\n  \"cpu-error-threshold\": 2.0,\n  \"disable-dram-formula\": true,\n  \"sensor-reports-frequency\": 1000\n}\n</code></pre> Alternative Source or Destination <p>If you want to use another Source or Destination, please check the documentation here and modify your configuration according to the Source or Destination that you want to use.</p> <p>Once you have your configuration file, run SmartWatts using one of the following command lines, depending on the installation you use:</p> DockerPip <pre><code>docker run -t \\\n--net=host \\\n-v $(pwd)/config_file.json:/config_file.json \\\npowerapi/smartwatts-formula --config-file /config_file.json\n</code></pre> <pre><code>python -m smartwatts --config-file config_file.json\n</code></pre>"},{"location":"reference/formulas/smartwatts/#combining-the-three-running-methods","title":"Combining the three Running Methods","text":"<p>The three running methods can be used to define a configuration. The priority is as follows:</p> <ol> <li>CLI</li> <li>Environment Variables</li> <li>Configuration File</li> </ol> <p>This means that parameters values defined via the CLI have the highest priority while values defined via Environment Variables will be preserved regarding those defined by a Configuration File.</p>"},{"location":"reference/grafana/grafana/","title":"Visualizing Power Consumptions on Grafana","text":"<p>Here it is explained how to visualize the power estimation computed by a Formula on a Grafana dashboard to obtain this kind of visualisation:</p> <p></p> <p>This screenshot shows the visualisation of power consumption of a Web browser and tools used for monitoring (Source, Destination, Sensor, Formula)</p> <p>In this tutorial, we describe how to connect a Formula to a Grafana instance by using InfluxDB 2.X as Destination. Then, we will see how to configure Grafana to visualize the power estimation computed by the Formula.</p> <p>This tutorial assumes that you know how launch a Formula and a Sensor to compute power estimation and that you have an InfluxDB 2.X and a Grafana instances running on your local machine. The InfluxDB 2.X instance listen on port <code>8086</code>.</p>"},{"location":"reference/grafana/grafana/#setup-grafana","title":"Setup Grafana","text":"<pre><code>docker run -d -p 3000:3000 grafana/grafana\n</code></pre> <p>After the launch, Grafana will be available at http://localhost:3000. On the signin page, enter admin for username and password.</p>"},{"location":"reference/grafana/grafana/#connect-grafana-to-the-influxdb-2x-instance","title":"Connect Grafana to the InfluxDB 2.X instance","text":"<p>Connect to your Grafana instance and go to the `\"Data sources\"`` section (in the configuration part of the side bar).</p> <p></p> <p>Click on the <code>\"Add new data source\"</code> button and select <code>\"InfluxDB\"</code>. Enter:   </p> <ol> <li>A data source Name (here we choose \"InfluxDB-2\"),</li> <li>A Query Language, i.e., <code>InfluxQL</code></li> <li>An instance URL (<code>http://localhost:8086</code>)</li> <li>A Custom HTTP Header called <code>Authorization</code> with Value <code>Token &lt;mytoken&gt;</code>, where <code>&lt;mytoken&gt;</code> is the token provided by InfluxDB 2.X for your organization.</li> <li>A Database name, (here we choose <code>power_consumption</code>) that is the <code>db</code> value of your destination defined in your formula configuration.</li> </ol> <p>Then click on the <code>\"Save &amp; test\"</code> button. User and Password are not required as we use a token for authentification.  </p> <p></p>"},{"location":"reference/grafana/grafana/#visualize-the-power-consumption-on-a-dashboard-in-real-time","title":"Visualize the power consumption on a dashboard in real-time","text":"<p>Go to the <code>\"Dashboard\"</code> section on the side bar and select on <code>New &gt; New dashboard</code>. Then click on <code>+ Add visualisation</code> Then select <code>influxdb-2</code> as data source.</p> <p></p> <p>Click on the query edition button (the one with a pencil on it) and write the following query on the <code>Query</code> field to request the power estimations from the InfluxDB 2.X measurement:</p> <pre><code>SELECT power FROM \"power_consumption\" GROUP BY target\n</code></pre> <p>Then write <code>$tag_target</code> on the <code>ALIAS BY</code> field to label each graph with the target name</p> <p></p> <p>To display the power consumption in real time, you can update the range of the visualisation to <code>last 5 minutes</code> and the <code>refresh dashboard</code> parameter to <code>5s</code>. This parameter are on the top-right corner of the UI.</p> <p></p>"},{"location":"reference/jouleit/jouleit/","title":"Jouleit","text":"<p>Jouleit is a script that can be used to monitor energy consumption for any program.</p> <p>Jouleit uses the Intel \"Running Average Power Limit\" (RAPL) technology that estimates power consumption of the CPU, RAM and integrated GPU. This technology is available on Intel CPU since the Sandy Bridge generation (2010).</p>"},{"location":"reference/jouleit/jouleit/#installation","title":"Installation","text":"<p>Jouleit need <code>gawk</code> to run. You can get the script from the github repository. Start jouleit by using</p> <pre><code>./jouleit.sh cmd\n</code></pre>"},{"location":"reference/jouleit/jouleit/#flags-and-options","title":"Flags and options","text":"Flag Description Default value -a print the details of all sockets instead of the aggregation False -b print the results in the format of *KEY1;VALUE1;KEY2;VALUE2.. False -l list all the available domaines ( CPU, DRAM ..etc ) and print them in the form of a header of csv -c Print only the values in csv format ( value1;value2;value3), We recommend using this after running the jouleit with -l Flag to see the order of the measured values false -s #N measure only the energy of the socket #N all the available sockets -o filename redirect the output and the log of the executed program in the file `filename current terminal -n N Run the programm N times and record the measured values in <code>data1234.csv</code> file"},{"location":"reference/processors/processors/","title":"Processors","text":"<p>Processors enable customized filtering and/or modifications of <code>Reports</code>. There are two kinds of processors:</p> <ul> <li><code>PreProcessors</code>: They are located between the <code>Puller</code> and the <code>Dispatcher</code>. They are supposed to pre-process the <code>HWPCReports</code> before computing estimations.</li> <li><code>PostProcessors</code>: They are located between, the <code>Formula</code> and the <code>Pusher</code>. They process <code>PowerReports</code> before storing them on the <code>Destination</code>.</li> </ul> <p>Figure below depicts where are they introduced in the architecture of a Software <code>PowerMeters</code>.</p> <p></p> <p><code>Processors</code> are optional, which means that you can continue to use Software <code>PowerMeters</code> as usual if you don't need them.  </p>"},{"location":"reference/processors/processors/#k8spreprocessor","title":"K8sPreProcessor","text":"<p>This <code>PreProcessor</code> uses the Kubernetes client for Python in order to get information related to <code>Reports</code>. In particular, pod name (<code>pod_name</code>), pod name space (<code>namespace</code>), and pod labels (<code>pod_labels</code>)  are collected. This information is added to metadata of the concerned <code>Report</code> under <code>k8s</code> key. The container name (<code>container_name</code>) is defined as the target of the <code>Report</code>. If a <code>Report</code> related to Kubernetes is not identified, it is ignored (i.e., the <code>Report</code> is not send t the <code>Dispatcher</code> and will be not considered by the <code>Formula</code>). If a <code>Report</code> is not related to Kubernetes, it is sent to the <code>Dispatcher</code> without modifications (i.e., no new metadata is added). </p> <p>If you want to use a <code>K8sPreProcessor</code> in your Software <code>PowerMeter</code>, you have to specify <code>k8s</code> as the <code>type</code> of the <code>PreProcessor</code>.</p>"},{"location":"reference/processors/processors/#parameters","title":"Parameters","text":"Parameter Type CLI shortcut Default Value Mandatory Description <code>api-mode</code> string <code>a</code> N/A Yes The configuration method used to run K8s. Possible values are <code>local</code>, <code>manual</code> and <code>cluster</code> <code>puller</code> string <code>p</code> N/A Yes The puller's name associated with the <code>PreProcessor</code> <code>api-host</code> string <code>h</code> <code>http://localhost</code> No The host associated with K8s. To be used with <code>api-mode</code> = <code>manual</code>  together with <code>api-key</code> <code>api-key</code> string <code>k</code> <code>YOUR_API_KEY</code> No The API Key associated with K8s. To be used with <code>api-mode</code> = <code>manual</code>  together with <code>api-host</code> <code>name</code> string <code>n</code> N/A Yes The name of the <code>PreProcessors</code>"},{"location":"reference/processors/processors/#json-file-excerpt","title":"JSON File Excerpt","text":"<pre><code>\"pre-processor\":{\n\n\"p1\":{\n   \"type\": \"k8s\",\n   \"api-mode\": \"local\",\n   \"puller\": \"puller\"\n\n}\n}\n</code></pre> <p>As notice, a <code>PreProcessor</code> is defined inside the <code>pre-processor</code> group. In this example, we are assuming that a <code>puller</code> named <code>puller</code> is defined in the <code>input</code> group of the same configuration.</p>"},{"location":"reference/processors/processors/#example-of-usage-with-smartwatts-formula-via-cli-parameters","title":"Example of Usage with SmartWatts Formula via CLI parameters","text":"DockerPip <pre><code>docker run -t \\\n--net=host \\\npowerapi/smartwatts-formula --verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output influxdb --model PowerReport --uri 127.0.0.1 --port 8086 --db test_result \\\n--pre-processor k8s --name p1 --api-mode local --puller puller \\\n--cpu-base-freq 1900 \\\n--cpu-error-threshold 2.0 \\\n--disable-dram-formula \\\n--sensor-reports-frequency 1000\n</code></pre> <pre><code>python -m smartwatts \\\n--verbose \\\n--input mongodb --model HWPCReport --uri mongodb://127.0.0.1 --db test --collection prep \\\n--output influxdb --model PowerReport --uri 127.0.0.1 --port 8086 --db test_result \\\n--pre-processor k8s --name p1 --api-mode local --puller puller \\\n--cpu-base-freq 1900 \\\n--cpu-error-threshold 2.0 \\\n--disable-dram-formula \\\n--sensor-reports-frequency 1000\n</code></pre>"},{"location":"reference/processors/processors/#example-of-usage-with-smartwatts-formula-with-environment-variables","title":"Example of Usage with SmartWatts Formula with Environment Variables","text":"DockerPip <pre><code>docker run -t \\\n--net=host \\\n-e POWERAPI_VERBOSE=true \\\n-e POWERAPI_STREAM=true \\\n-e POWERAPI_CPU_BASE_FREQ=1900 \\\n-e POWERAPI_CPU_ERROR_THRESHOLD=2.0 \\\n-e POWERAPI_DISABLE_DRAM_FORMULA=true \\\n-e POWERAPI_SENSOR_REPORTS_FREQUENCY=1000 \\\n-e POWERAPI_INPUT_PULLER_MODEL=HWPCReport \\\n-e POWERAPI_INPUT_PULLER_TYPE=mongodb \\\n-e POWERAPI_INPUT_PULLER_URI=mongodb://127.0.0.1 \\\n-e POWERAPI_INPUT_PULLER_DB=test \\\n-e POWERAPI_INPUT_PULLER_COLLECTION=prep \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_MODEL=PowerReport \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_TYPE=influxdb \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_URI=127.0.0.1 \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_PORT=8086 \\\n-e POWERAPI_OUTPUT_PUSHER_POWER_DB=test_result \\\n-e POWERAPI_PRE_PROCESSOR_P1_TYPE=k8s \\\n-e POWERAPI_PRE_PROCESSOR_P1_API_MODE=local \\\n-e POWERAPI_PRE_PROCESSOR_P1_PULLER=puller \\\npowerapi/smartwatts-formula\n</code></pre> <pre><code>export POWERAPI_VERBOSE=true\nexport POWERAPI_STREAM=false\nexport POWERAPI_CPU_BASE_FREQ=1900\nexport POWERAPI_CPU_ERROR_THRESHOLD=2.0\nexport POWERAPI_DISABLE_DRAM_FORMULA=true\nexport POWERAPI_SENSOR_REPORTS_FREQUENCY=1000\nexport POWERAPI_INPUT_PULLER_MODEL=HWPCReport\nexport POWERAPI_INPUT_PULLER_TYPE=mongodb\nexport POWERAPI_INPUT_PULLER_URI=mongodb://127.0.0.1\nexport POWERAPI_INPUT_PULLER_DB=test\nexport POWERAPI_INPUT_PULLER_COLLECTION=prep\nexport POWERAPI_OUTPUT_PUSHER_POWER_MODEL=PowerReport\nexport POWERAPI_OUTPUT_PUSHER_POWER_TYPE=influxdb\nexport POWERAPI_OUTPUT_PUSHER_POWER_URI=127.0.0.1\nexport POWERAPI_OUTPUT_PUSHER_POWER_PORT=8086\nexport POWERAPI_OUTPUT_PUSHER_POWER_DB=test_result\nexport POWERAPI_PRE_PROCESSOR_P1_TYPE=k8s\nexport POWERAPI_PRE_PROCESSOR_P1_API_MODE=local\nexport POWERAPI_PRE_PROCESSOR_P1_PULLER=puller\npython -m smartwatts\n</code></pre>"},{"location":"reference/processors/processors/#example-of-usage-with-smartwatts-formula-via-a-configuration-file","title":"Example of Usage with SmartWatts Formula via a Configuration File","text":"<p>Below an example is provided by using MongoDB as Source and InfluxDB as Destination.</p> <pre><code>{\n  \"verbose\": true,\n  \"stream\": true,\n  \"input\": {\n    \"puller\": {\n      \"model\": \"HWPCReport\",\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test\",\n      \"collection\": \"prep\"\n    }\n  },\n  \"output\": {\n    \"pusher_power\": {\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test_results\",\n      \"collection\": \"power_consumption\"\n    }\n  },\n  \"pre-processor\":{\n\n    \"p1\":{\n      \"type\": \"k8s\",\n      \"api-mode\": \"local\",\n      \"puller\": \"puller\"\n    }\n  },\n\n  \"cpu-base-freq\": 1900,\n  \"cpu-error-threshold\": 2.0,\n  \"disable-dram-formula\": true,\n  \"sensor-reports-frequency\": 1000\n}\n</code></pre>"},{"location":"reference/reports/reports/","title":"Reports","text":"<p>PowerAPI toolkit is modular, which means any sensor can be plugged to any monitoring tool as long as the needed information is provided. We fixed the way of encoding the information. Those encoding are called reports.</p> <p>A report type specify the <code>json</code> fields that has to be provided to pass information of a certain kind. All reports types have a common basis:</p> <ul> <li> <p><code>timestamp</code>: at the format \"year-month-dayThour:minutes:seconds\". The   timestamp reflects the time at which the information correspond, not the   time the information was computed.   For example if a power consumption of a CPU is measured at time <code>t</code> and used to   determine the power consumption of a <code>cgroup</code> in a <code>PowerReport</code>, this report   has timestamp <code>t</code>.</p> </li> <li> <p><code>target</code>: the target is the subject of the measure. For example if     you produce a report that contain information relative to a program, domain,     etc., the target refers to it. It corresponds to the <code>cgroup</code> name.</p> </li> <li> <p><code>sensor</code>: it's a name field that is used to identify the reports produced by or computed thanks to a sensor.  </p> </li> </ul> <p>Therefore, a report have the following format:</p> <p><pre><code>\"timestamp\":$timestamp,\n\"target\":$target,\n\"sensor\":$sensor,\n$report_specific_fields\n</code></pre> In the following sections we specify the <code>$report_specific_fields</code> for each type of report.</p>"},{"location":"reference/reports/reports/#hwpc-reports","title":"HWPC Reports","text":"<p>A <code>HWPCReport</code> is used to report performance counters and RAPL. Its specific fields are the following:</p> <ul> <li><code>groups</code>: a list of subreport that can be of three kind, <code>rapl</code>, <code>core</code> and   <code>msr</code>.</li> </ul> <p>Each group is represented in the same way:</p> <pre><code>{\n  $type: {\n    $core_number : {\n      $socket_number : {\n        List of counter and their value\n      }\n    }\n  }\n}\n</code></pre> <p>Below you can find an example of <code>HWPCReport</code>:</p> <pre><code>{\n  \"timestamp\": \"2023-01-13T09:51:22.630\",\n  \"sensor\": \"sensor_test\",\n  \"target\": \"influxdb\",\n  \"groups\": {\n    \"core\": {\n      \"0\": {\n        \"0\": {\n          \"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 75510,\n          \"CPU_CLK_THREAD_UNHALTED:REF_P\": 2271,\n          \"time_enabled\": 167403,\n          \"time_running\": 167403,\n          \"LLC_MISSES\": 1077,\n          \"INSTRUCTIONS_RETIRED\": 31693\n        },\n        \"1\": {\n          \"CPU_CLK_THREAD_UNHALTED:THREAD_P\": 43801,\n          \"CPU_CLK_THREAD_UNHALTED:REF_P\": 1318,\n          \"time_enabled\": 99324,\n          \"time_running\": 99324,\n          \"LLC_MISSES\": 750,\n          \"INSTRUCTIONS_RETIRED\": 15011\n        }\n      }\n    }\n  }\n}\n{\n  \"timestamp\" : \"2023-01-13T09:51:22.630\",\n  \"sensor\" : \"sensor_test\",\n  \"target\" : \"all\",\n  \"groups\" : {\n    \"rapl\" : {\n      \"0\" : {\n        \"1\" : {\n                  \"RAPL_ENERGY_PKG\" : 5709496320,\n                  \"time_enabled\" : 1006717449,\n                  \"time_running\" : 1006717449\n          }\n      }\n    },\n    \"msr\" : {\n      \"0\" : {\n        \"0\" : {\n          \"MPERF\" : 29646849,\n            \"APERF\" : 12319312,\n            \"TSC\" : 2122153094,\n            \"time_enabled\" : 1006580601,\n            \"time_running\" : 1006580601\n        },\n        \"1\" : {\n          \"MPERF\" : 20587012,\n          \"APERF\" : 19838920,\n          \"TSC\" : 2122185970,\n            \"time_enabled\" : 1006560540,\n            \"time_running\" : 1006560540\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/reports/reports/#power-reports","title":"Power Reports","text":"<p>A <code>PowerReport</code> is used to transfer information about power consumption estimations. Its specific fields are the following:</p> <ul> <li><code>power</code>: a power value in Watts.</li> </ul> <p>Below you find an exemple of <code>PowerReport</code>:</p> <pre><code>{\n  \"timestamp\": \"2023-01-14T12:37:37.168817\",\n  \"sensor\": \"formula_group\",\n  \"target\": \"all\",\n  \"power\": 42\n}\n</code></pre>"},{"location":"reference/sensors/hwpc-sensor/","title":"HWPC Sensor","text":"<p>HardWare Performance Counter (HWPC) Sensor is a tool that monitors the Intel CPU performance counter and the power consumption of CPU.</p> <p>HWPC Sensor uses the RAPL (Running Average Power Limit) technology to monitor CPU power consumption. This technology is only available on Intel Sandy Bridge architecture or newer. However, Intel Core Tiger Lake, Alder Lake and Raptor Lake families for desktop and mobile are not supported. The sensor is also available on AMD Zen 2 and Zen 3. Power/ARM/RISCV are not supported architectures.</p> <p>In particular, it exploits the <code>perf</code> API of the Linux kernel. It is only available on Linux and need to have root access to be used. If you are using version 1.2 or older, the sensor requires cgroup V1.</p> <p>The sensor can not be used in a virtual machine, it must have access (via Linux kernel API) to the real CPU register to read performance counter values.</p> <p>The sensor provides raw values of performance counters as well as <code>RAPL</code> raw values in microjoules.   </p>"},{"location":"reference/sensors/hwpc-sensor/#installation","title":"Installation","text":"Docker <pre><code>docker pull ghcr.io/powerapi-ng/hwpc-sensor\n</code></pre>"},{"location":"reference/sensors/hwpc-sensor/#usage","title":"Usage","text":"<p>For running the sensor, a Source and a configuration defined via a file or CLI parameters are required.</p>"},{"location":"reference/sensors/hwpc-sensor/#source","title":"Source","text":"<p>For running HWPC Sensor we are using MongoDB as Source as a docker container.</p> <p>To start a MongoDB instance via the command line</p> <pre><code>docker run -d --name mongo_destination -p 27017:27017 mongo\n</code></pre>"},{"location":"reference/sensors/hwpc-sensor/#root-parameters","title":"Root Parameters","text":"<p>The table below shows the different parameters related to the Sensor Configuration:</p> Parameter Type CLI shortcut Default Value Description <code>verbose</code> <code>bool</code> (flag) <code>v</code> <code>false</code> Verbose or quiet mode <code>frequency</code> <code>int</code> <code>f</code> <code>1000</code> The time in milliseconds between two reports <code>name</code> <code>string</code> <code>n</code> - Name of the sensor <code>cgroup_basepath</code> <code>string</code> <code>p</code> <code>/sys/fs/cgroup</code> (<code>cgroup</code> V2) The base path for <code>cgroups</code>. To use <code>cgroup</code> V1 <code>/sys/fs/cgroup/perf_event</code> needs to be used as value <code>system</code> <code>dict</code> <code>s</code> - A system group with a monitoring type and a list of system events (cf. <code>system</code> Group Parameters) <code>container</code> <code>dict</code> <code>c</code> - A group with a monitoring type and a list of  events (cf. <code>system</code> Group Parameters) <code>output</code> Destination <code>r</code> <code>csv</code> The Destination used as output. The Sensor only supports MongoDB (<code>mongodb</code>) and CSV (<code>csv</code>) as Destination."},{"location":"reference/sensors/hwpc-sensor/#system-and-container-groups-parameters","title":"<code>system</code> and <code>container</code> Groups Parameters","text":"Parameter Type CLI shortcut Default Value Description <code>events</code> <code>string</code> <code>e</code> - List of events to be monitored. As CLI parameter, each event is indicated with <code>e</code> <code>monitoring_type</code> <code>string</code> (<code>MONITOR_ONE_CPU_PER_SOCKET</code>, <code>MONITOR_ALL_CPU_PER_SOCKET</code> ) <code>o</code> (flag) <code>MONITOR_ALL_CPU_PER_SOCKET</code> The monitoring type. If <code>o</code> is specified as CLI parameter, <code>MONITOR_ONE_CPU_PER_SOCKET</code> is used as type"},{"location":"reference/sensors/hwpc-sensor/#events","title":"Events","text":"<p>Table below depicts the different group events for compatible Intel and AMD architectures.</p> Architectures Group Events Intel Sandy Bridge and newer <code>rapl</code> <code>RAPL_ENERGY_PKG</code>, <code>RAPL_ENERGY_DRAM</code> AMD Zen 2 and 3 <code>rapl</code> <code>RAPL_ENERGY_PKG</code> Intel Sandy Bridge and newer, AMD Zen 2 and 3 <code>msr</code> <code>TSC</code>, <code>APERF</code>, <code>MPERF</code> Intel Skylake, Whiskey Lake, Coffe Lake <code>core</code> <code>CPU_CLK_THREAD_UNHALTED:REF_P</code>, <code>CPU_CLK_THREAD_UNHALTED:THREAD_P</code>, <code>LLC_MISSES</code>,<code>INSTRUCTIONS_RETIRED</code> Intel Sandy Bridge, Comet Lake <code>core</code> <code>CPU_CLK_UNHALTED:REF_P</code>, <code>CPU_CLK_UNHALTED:THREAD_P</code>, <code>LLC_MISSES</code>,<code>INSTRUCTIONS_RETIRED</code> AMD Zen 2 <code>core</code> <code>CYCLES_NOT_IN_HALT</code>, <code>RETIRED_INSTRUCTIONS</code> , <code>RETIRED_UOPS</code> AMD Zen 3 <code>core</code> <code>CYCLES_NOT_IN_HALT</code>, <code>RETIRED_INSTRUCTIONS</code> , <code>RETIRED_OPS</code>"},{"location":"reference/sensors/hwpc-sensor/#running-the-sensor-with-a-configuration-file","title":"Running the Sensor with a Configuration File","text":"<pre><code>{\n  \"name\": \"sensor\",\n  \"verbose\": true,\n  \"frequency\": 500,\n  \"output\": {\n    \"type\": \"mongodb\",\n    \"uri\": \"mongodb://127.0.0.1\",\n    \"database\": \"db_sensor\",\n    \"collection\": \"report_0\"\n  },\n  \"system\": {\n    \"rapl\": {\n      \"events\": [\"RAPL_ENERGY_PKG\"],\n      \"monitoring_type\": \"MONITOR_ONE_CPU_PER_SOCKET\"\n    },\n    \"msr\": {\n      \"events\": [\"TSC\", \"APERF\", \"MPERF\"]\n    }\n  },\n  \"container\": {\n    \"core\": {\n      \"events\": [\n        \"CPU_CLK_THREAD_UNHALTED:REF_P\",\n        \"CPU_CLK_THREAD_UNHALTED:THREAD_P\",\n        \"LLC_MISSES\",\n        \"INSTRUCTIONS_RETIRED\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Once you have your configuration file, run HWPC Sensor using one of the following command lines, depending on the installation you use:</p> Docker <pre><code>docker run --rm  \\\n--net=host \\\n--privileged \\\n--pid=host \\\n-v /sys:/sys \\\n-v /var/lib/docker/containers:/var/lib/docker/containers:ro \\\n-v /tmp/powerapi-sensor-reporting:/reporting \\\n-v $(pwd):/srv \\\n-v $(pwd)/config_file.json:/config_file.json \\\npowerapi/hwpc-sensor --config-file /config_file.json\n</code></pre>"},{"location":"reference/sensors/hwpc-sensor/#running-the-sensor-via-cli-parameters","title":"Running the Sensor via CLI parameters","text":"<p>In order to run the Sensor without a configuration file, run HWPC Sensor using one of the following command lines, depending on the installation you use:</p> Docker <pre><code>docker run --rm \\\n--net=host \\\n--privileged \\\n--pid=host \\\n-v /sys:/sys \\\n-v /var/lib/docker/containers:/var/lib/docker/containers:ro \\\n-v /tmp/powerapi-sensor-reporting:/reporting \\\n-v $(pwd):/srv \\\npowerapi/hwpc-sensor \\\n-n \"$(hostname -f)\" \\\n-r \"mongodb\" -U \"mongodb://127.0.0.1\" -D \"db_sensor\" -C \"report_0\" \\\n-s \"rapl\" -o -e \"RAPL_ENERGY_PKG\" \\\n-s \"msr\" -e \"TSC\" -e \"APERF\" -e \"MPERF\" \\\n-c \"core\" -e \"CPU_CLK_THREAD_UNHALTED:REF_P\" -e \"CPU_CLK_THREAD_UNHALTED:THREAD_P\" -e \"LLC_MISSES\" -e \"INSTRUCTIONS_RETIRED\"\n</code></pre> Reports' Storage <p>Your <code>HWPCReports</code> will be stored on MongoDB.</p> CLI parameters' names <p>You can only use shortcuts.</p>"},{"location":"reference/sensors/procfs-sensor/","title":"Procfs Sensor","text":"<p>The Proc Filesystem Sensor is a tool that monitor the CPU usage of cgroup via the Linux's proc filesystem. It uses <code>pidstat</code> to retreive the percentage of CPU usage of each process. It then use the <code>/sys/fs/perf_event</code> directory to find the appartenance of processes to cgroup.</p> <p>The sensor need the cgroup version 1. The version 2 is not supported yet.</p>"},{"location":"reference/sensors/procfs-sensor/#installation","title":"Installation","text":""},{"location":"reference/sensors/procfs-sensor/#from-pyp","title":"From pyp","text":"<pre><code>pip install procfs-sensor\n</code></pre>"},{"location":"reference/sensors/procfs-sensor/#from-docker","title":"From docker","text":"<pre><code>docker pull powerapi/procfs-sensor\n</code></pre>"},{"location":"reference/sensors/procfs-sensor/#from-deb-file","title":"From deb file","text":"<p>Download the <code>.deb</code> file from the latest release</p> <p>Install the sensor with</p> <pre><code>sudo apt install procfs-sensor-1.1.0.deb\n</code></pre>"},{"location":"reference/sensors/procfs-sensor/#using-the-binary","title":"Using the binary","text":"<p>You can use the compiled version of the sensor available here.</p>"},{"location":"reference/sensors/procfs-sensor/#usage","title":"Usage","text":"<p>Before running the sensor, first you need to define the cgroup you want to track.</p> <p>Then, for executing the sensor you need a configuration file. You find an example below:</p> <pre><code>{\n  \"name\": \"procfs_sensor\",\n  \"verbose\": true,\n  \"frequency\": 500,\n  \"output\": {\n    \"type\": \"socket\",\n    \"uri\": \"127.0.0.1\",\n    \"port\": 8080\n  },\n  \"target\": [\"cgroup1\", \"cgroup2\", ...]\n}\n</code></pre> <p>You can start the sensor with the following command line, depending on your installation:</p> <ul> <li>from docker: <pre><code>docker -v ./config_file.json:/config_file.json run procfs-sensor --config_file config_file.json\n</code></pre></li> <li>from pip: <pre><code>python -m procfs_sensor --config-file config_file.json\n</code></pre> In both cases, that configuration file name is <code>config_file.json</code></li> </ul> <p>You can use a TCP server to retreive the reports.</p>"},{"location":"reference/sensors/procfs-sensor/#produced-reports","title":"Produced Reports","text":"<p>Profs Sensor produces <code>ProcfsReports</code>. More information about this kind of report can be found here.</p>"},{"location":"script/smartwatts_auto_config/","title":"Auto-config Script","text":"<p>This script detect the frequency of your cpu and use them to provide a configuration file for Smartwatts.</p> <pre><code>#!/usr/bin/env bash\n\nmaxfrequency=$(lscpu -b -p=MAXMHZ | tail -n -1| cut -d , -f 1)\nminfrequency=$(lscpu -b -p=MINMHZ | tail -n -1 | cut -d , -f 1)\nbasefrequency=$(lscpu | grep \"Model name\" | cut -d @ -f 2 | cut -d G -f 1)\nbasefrequency=$(expr ${basefrequency}\\*1000 | bc | cut -d . -f 1)\n\necho \"\n{\n  \"verbose\": true,\n  \"stream\": true,\n  \"input\": {\n    \"puller\": {\n      \"model\": \"HWPCReport\",\n      \"type\": \"socket\",\n      \"uri\": \"127.0.0.1\",\n      \"port\": 8080,\n      \"collection\": \"test_hwpc\"\n    }\n  },\n  \"output\": {\n    \"pusher_power\": {\n      \"type\": \"mongodb\",\n      \"uri\": \"mongodb://127.0.0.1\",\n      \"db\": \"test\",\n      \"collection\": \"prep\"\n    }\n  },\n  \"cpu-ratio-base\": $basefrequency,\n  \"cpu-ratio-min\": $minfrequency,\n  \"cpu-ratio-max\": $maxfrequency,\n  \"cpu-error-threshold\": 2.0,\n  \"disable-dram-formula\": true,\n  \"sensor-report-sampling-interval\": 1000\n}\n\" &gt; ./config_file.json\n</code></pre>"}]}